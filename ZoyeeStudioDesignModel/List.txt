Abstract Factory : 抽象工厂
	一个工厂对应一类产品, 可以有效地组合各种产品, 特别适用于组件类的产品
	
FactoryMethod : 工厂方法
	一个工厂对应一种产品, 新增加一种产品就要新增加一个工厂

Builder : 建造者模式
	将复杂的对象创建过程抽象成几个部分, 当对象有变化时, 可以灵活地控制创建过程

Prototype : 原型模式
	当有N个原型要创建时, 使用克隆比直接实例化更为方便

Singleton : 单例模式
	同一进程中, 所有的调用者使用的对象都是同一个实例化的对象

--------------------------------------------------------------------------------------------

Adapter : 适配器模式
	通过一个适配器把原来不同的两个对象给统一起来

Bridge : 桥接模式
	通过一个桥接, 把几个抽象对象连接在一起, 让几个抽象对象都可以独立变化, 互不影响

Composite : 组件模式
	通过接口, 让用户可以访问到树型结构里的节点, 把接口抽象出来操作

Decorate : 装饰者模式
	当接口不动, 但又要接口增加一些新的行为, 可以抽象出装饰者, 想用就用, 不想用接着用原来的接口

Facade : 外观模式
	有几个接口, 然后根据不同的需求进行不同的打包, 方便用户使用

Flyweight : 享元模式
	让几个对象可以被重复使用, 只存在一份实例, 所有的实例都是从同一个地方出来, 防止盲目拷贝

Proxy : 代理模式
	调用者直接跟代理沟通

---------------------------------------------------------------------------------------------------------------------

Interpreter : 解释器模式
	相同的对象, 放进不同的解释器中, 以获得不同的执行过程

Template Method : 模板方法模式
	把相同的部分放在父类, 再把不同的实现推迟到子类, 父类提供一个框架模板

Chain of Responsibility : 职责链模式
	有传递关系, 如果自己无法处理的传递给自己的上级去处理, 直到有人把事情给处理掉

